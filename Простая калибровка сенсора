#include <Adafruit_ILI9341.h>
#include <TouchScreen.h>
#include <SPI.h>

// Определяем пины для дисплея ILI9341
#define TFT_CS     10 // Пин Chip Select (CS) для дисплея
#define TFT_RST    9  // Пин Reset (RST) для дисплея. Можно подключить к пину RESET на Arduino
#define TFT_DC     8  // Пин Data/Command (DC) для дисплея

// Определяем пины для сенсорного экрана
#define YP A3  // Пин Y+ сенсора. Должен быть аналоговым
#define XM A2  // Пин X- сенсора. Должен быть аналоговым
#define YM 9   // Пин Y- сенсора. Может быть цифровым
#define XP 8   // Пин X+ сенсора. Может быть цифровым

// Значения калибровки для сенсорного экрана.
// Они зависят от конкретного экрана и его ориентации.
// TS_MINX, TS_MINY: минимальные (сырые) значения X и Y
// TS_MAXX, TS_MAXY: максимальные (сырые) значения X и Y
#define TS_MINX 150
#define TS_MINY 120
#define TS_MAXX 920
#define TS_MAXY 940

// Порог срабатывания сенсора, чтобы отличить нажатие от шума
#define MINPRESSURE 10   // Минимальное давление для фиксации касания
#define MAXPRESSURE 1000 // Максимальное давление для фиксации касания

// Создаем объекты для работы с дисплеем и сенсорным экраном
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_RST);
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300); // 300 - сопротивление сенсора, обычно используется это значение

void setup() {
  Serial.begin(9600); // Инициализация последовательного порта для вывода отладочной информации

  // Инициализация дисплея
  tft.begin();
  tft.setRotation(3);  // Устанавливаем ориентацию дисплея (0-3). 3 соответствует альбомной ориентации.
  tft.fillScreen(ILI9341_BLACK); // Заполняем экран черным цветом

  // Выводим текст, чтобы показать, что программа ждет касания
  tft.setTextColor(ILI9341_WHITE); // Устанавливаем белый цвет текста
  tft.setTextSize(2);             // Устанавливаем размер текста
  tft.setCursor(20, 20);          // Устанавливаем позицию курсора
  tft.print("Touch the screen!"); // Выводим текст на экран
}

void loop() {
  // Получаем точку касания
  TSPoint p = ts.getPoint();

  // Сбрасываем режимы пинов после считывания данных с сенсора.
  // Это необходимо, когда используются аналоговые пины, которые также могут быть использованы дисплеем.
  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);

  // Проверяем, есть ли действительное касание
  if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
    // Преобразуем (маппируем) сырые координаты сенсора в координаты дисплея
    int x = map(p.x, TS_MINX, TS_MAXX, 0, tft.width());
    int y = map(p.y, TS_MINY, TS_MAXY, 0, tft.height());

    // Выводим координаты касания в последовательный порт для отладки
    Serial.print("X = "); Serial.print(x);
    Serial.print(", Y = "); Serial.println(y);

    // Рисуем круг в точке касания
    tft.fillCircle(x, y, 10, ILI9341_RED); // Рисуем красный круг радиусом 10 пикселей
  }

  delay(100);  // Небольшая задержка, чтобы не перегружать экран обновлениями
}
